name: release-e2e-test
on:
  workflow_dispatch:
  push:
    tags:
      - "v*.*.*"
jobs:
  get-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Get release version
        id: get_version
        run: |
          echo ::set-output name=version::$(./scripts/vertagen/vertagen.sh -p v -f docker)
      - name: Check output
        env:
          VERSION: ${{ steps.get_version.outputs.version }}
        run: |
          echo "Version: ${VERSION}"

  publish-python-sdk:
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Install dependencies
        working-directory: ./python/sdk
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine
      - name: Build and publish
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        working-directory: ./python/sdk
        run: |
          python setup.py sdist bdist_wheel
          twine upload dist/*

  publish-merlin-docker:
    runs-on: ubuntu-latest
    needs: get-version
    steps:
      - uses: actions/checkout@v2
      - name: Build and push Merlin Docker image
        uses: docker/build-push-action@v1
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
          registry: ghcr.io
          tags: ${{ needs.get-version.outputs.version }}

  publish-pyfunc-base-docker:
    runs-on: ubuntu-latest
    needs: get-version
    steps:
      - uses: actions/checkout@v2
      - name: Build and push PyFunc Base Docker image
        uses: docker/build-push-action@v1
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
          registry: ghcr.io
          repository: gojek/merlin-pyfunc-base
          path: python/pyfunc-server
          dockerfile: python/pyfunc-server/base.Dockerfile
          tags: dev,${{ needs.get-version.outputs.version }}

  publish-pyspark-base-docker:
    runs-on: ubuntu-latest
    needs: get-version
    steps:
      - uses: actions/checkout@v2
      - name: Build and push PySpark Base Docker image
        uses: docker/build-push-action@v1
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
          registry: ghcr.io
          repository: gojek/merlin-pyspark-base
          path: python/batch-predictor
          dockerfile: python/batch-predictor/docker/base.Dockerfile
          tags: ${{ needs.get-version.outputs.version }}

  publish-mlflow-docker:
    runs-on: ubuntu-latest
    needs: get-version
    steps:
      - uses: actions/checkout@v2
      - name: Build and push MLflow Docker image
        uses: docker/build-push-action@v1
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
          registry: ghcr.io
          repository: gojek/mlflow
          path: mlflow
          dockerfile: mlflow/Dockerfile
          build_args: MLFLOW_VERSION=1.3.0
          tags: 1.3.0

  e2e-test:
    runs-on: ubuntu-latest
    needs: [get-version, publish-merlin-docker]
    steps:
      - uses: actions/checkout@v2
        with:
          path: merlin
      - uses: actions/checkout@master
        with:
          repository: gojek/mlp
          ref: main
          path: mlp
      - uses: actions/setup-go@v2
        with:
          go-version: 1.13
      - uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Setup cluster
        run: ./merlin/scripts/e2e/setup-cluster.sh
      - name: Setup mlp namespace
        run: |
          kubectl create namespace mlp
          kubectl create secret generic vault-secret --namespace=mlp --from-literal=address=http://vault.vault.svc.cluster.local --from-literal=token=root
      - name: Deploy MLP
        run: |
          helm install mlp mlp/chart --namespace=mlp \
            --values=mlp/chart/values-e2e.yaml \
            --set mlp.image.tag=main \
            --wait --timeout=5m
      - name: Deploy Merlin
        env:
          MERLIN_CHART_PATH: merlin/charts/merlin
          MERLIN_IMAGE_TAG: ${{ needs.get-version.outputs.version }}
        run: ./merlin/scripts/e2e/deploy-merlin.sh
      - name: Run E2E test
        run: ./merlin/scripts/e2e/run-e2e.sh "merlin/api"
